[{"title": "HTML", "type": ["definition"], "description": "HTML ", "keywords": [], "past": [], "future": [2, 3, 6, 7, 12, 26, 48, 115, 178], "id": 1, "related": []}, {"title": "annotates content ", "type": ["definition"], "description": "annotates content ", "keywords": [], "past": [1], "future": [], "id": 2, "related": []}, {"title": "defines document structure ", "type": ["definition"], "description": "defines document structure ", "keywords": [], "past": [1], "future": [26, 27, 205], "id": 3, "related": []}, {"title": "CSS ", "type": ["definition"], "description": "CSS ", "keywords": [], "past": [], "future": [178, 247], "id": 4, "related": []}, {"title": "Javascript ", "type": ["definition"], "description": "Javascript ", "keywords": [], "past": [48], "future": [11, 13, 15, 20, 36, 43, 49, 50, 65, 81, 100, 124, 136, 173, 131, 178, 214, 225, 226, 230, 258], "id": 5, "related": []}, {"title": "caniuse.com", "type": ["definition"], "description": "caniuse.com will check for you supported features for browsers ", "keywords": [], "past": [1], "future": [], "id": 6, "related": []}, {"title": "HTML tag ", "type": ["definition"], "description": "HTML tag ", "keywords": [], "past": [1], "future": [8, 9, 12, 26, 27, 32, 128, 129, 140, 209], "id": 7, "related": []}, {"title": "opening tag ", "type": ["definition"], "description": "opening tag ", "keywords": [], "past": [7], "future": [10], "id": 8, "related": []}, {"title": "closing tag ", "type": ["definition"], "description": "closing tag ", "keywords": [], "past": [7], "future": [], "id": 9, "related": []}, {"title": "attribute  ", "type": ["definition"], "description": "attribute  ", "keywords": [], "past": [8], "future": [], "id": 10, "related": []}, {"title": "javascript can be run in html with the <script> tag ", "type": ["definition"], "description": "javascript can be run in html with the <script> tag ", "keywords": [], "past": [12, 5], "future": [], "id": 11, "related": []}, {"title": "<script> ", "type": ["definition"], "description": "<script> ", "keywords": [], "past": [1, 7], "future": [11, 28], "id": 12, "related": []}, {"title": "var variables", "type": ["definition"], "description": "variables are starting with  var ", "keywords": [], "past": [5], "future": [14, 17, 18, 24, 212, 213, 220, 222, 223, 224], "id": 13, "related": []}, {"title": "no types are declared for variables ", "type": ["definition"], "description": "no types are declared for variables ", "keywords": [], "past": [13], "future": [], "id": 14, "related": []}, {"title": "function", "type": ["definition"], "description": "function a () {...} or var a = function () {...} definition ", "keywords": [], "past": [5], "future": [16, 17, 18, 80, 101, 157, 159, 165, 167, 170, 180, 246], "id": 15, "related": []}, {"title": "executing a function will have a() or no space after function name ", "type": ["definition"], "description": "executing a function will have a() or no space after function name ", "keywords": [], "past": [15], "future": [], "id": 16, "related": []}, {"title": "can have attributes in function ", "type": ["definition"], "description": "can have attributes in function ", "keywords": [], "past": [15, 13], "future": [19, 169, 185], "id": 17, "related": []}, {"title": "function will return a value with return keyword ", "type": ["definition"], "description": "function will return a value with return keyword ", "keywords": [], "past": [15, 13], "future": [], "id": 18, "related": []}, {"title": "all arguments in a javascript function are optional ", "type": ["definition"], "description": "all arguments in a javascript function are optional ", "keywords": [], "past": [17], "future": [185], "id": 19, "related": []}, {"title": "scope ", "type": ["definition"], "description": "scope ", "keywords": [], "past": [5], "future": [21, 22, 224], "id": 20, "related": []}, {"title": "global scope ", "type": ["definition"], "description": "global scope ", "keywords": [], "past": [20], "future": [24], "id": 21, "related": []}, {"title": "lexical scope ", "type": ["definition"], "description": "lexical scope or the curly braces indicate a new scope", "keywords": [], "past": [20], "future": [23], "id": 22, "related": []}, {"title": "execution context", "type": ["definition"], "description": "each execution context has its own variable environment and has a special this object and has a reference to outer environment ", "keywords": [], "past": [22], "future": [24, 25, 97, 98], "id": 23, "related": []}, {"title": "scope chain", "type": [], "description": "scope chain means referenced variable will be searched in its current scope first, then outer, then outer, etc. If not found in global scope, the variable is undefined ", "keywords": [], "past": [23, 21, 13], "future": [98, 111, 112], "id": 24, "related": []}, {"title": "this object", "type": ["definition"], "description": "this is refering to window  ", "keywords": [], "past": [23, 173], "future": [117], "id": 25, "related": []}, {"title": "<!doctype html>", "type": ["definition"], "description": "every html should have <!doctype html> ", "keywords": [], "past": [3, 1, 7], "future": [], "id": 26, "related": []}, {"title": "<html>", "type": ["definition", "html tag"], "description": "<html> contains the whole html document ", "keywords": [], "past": [7, 3], "future": [29], "id": 27, "related": []}, {"title": "<head>", "type": ["defintion", "html tag"], "description": "<head> tag contains metadata about main content ", "keywords": [], "past": [12], "future": [31], "id": 28, "related": []}, {"title": "<body>", "type": ["definition", "html tag"], "description": "<body> ", "keywords": [], "past": [27], "future": [30, 201, 203, 204, 205, 206, 207, 208], "id": 29, "related": []}, {"title": "<p> paragraph tag ", "type": ["definition", "html tag"], "description": "<p> paragraph tag ", "keywords": [], "past": [29], "future": [], "id": 30, "related": []}, {"title": "<meta>", "type": ["definition", "html tag"], "description": "<meta> metadata tag ", "keywords": [], "past": [28], "future": [], "id": 31, "related": []}, {"title": "block-level elements", "type": ["definition", "HTML"], "description": "block-level elements render to begin on a new line ", "keywords": [], "past": [7], "future": [33, 34, 209], "id": 32, "related": []}, {"title": "inline elements", "type": ["definition"], "description": "inline elements all go in same line, can only contain other inline elements ", "keywords": [], "past": [32], "future": [35, 209], "id": 33, "related": []}, {"title": "<div>", "type": ["definition", "HTML tag"], "description": "<div> is most standard block level element ", "keywords": [], "past": [32], "future": [], "id": 34, "related": []}, {"title": "<span>", "type": ["definition", "HTML tag"], "description": "<span> is the most standard inline element ", "keywords": [], "past": [33], "future": [], "id": 35, "related": []}, {"title": "Node.js", "type": ["definition"], "description": "Node.js is built around an event driven non blocking I/O model which makes it very efficient to run Javascript programs on the desktop and synchronous Javascript on the desktop.  ", "keywords": [], "past": [5], "future": [37, 38], "id": 36, "related": []}, {"title": "npm", "type": ["definition"], "description": "npm or Node package manager is the manager for the node ecosystem that manages all the node modules and packages that have been made public available by many different users ", "keywords": [], "past": [36], "future": [40], "id": 37, "related": []}, {"title": "package.json", "type": ["definition"], "description": "A typical node package consist of JavaScript files together with a file called package.json which is the manifest file for this node module. ", "keywords": [], "past": [36, 43], "future": [39, 41, 42, 46, 47], "id": 38, "related": []}, {"title": "npm init", "type": ["definition"], "description": "npm init creates a package.json file through UI ", "keywords": [], "past": [38], "future": [], "id": 39, "related": []}, {"title": "npm install (package) ", "type": ["definition"], "description": "npm install (package) ", "keywords": [], "past": [37], "future": [41, 42, 44, 45, 190], "id": 40, "related": []}, {"title": "npm install (package) --save-dev", "type": ["definition"], "description": "npm install (package) --save-dev means it is used for development dependency for project ", "keywords": [], "past": [40, 38], "future": [45], "id": 41, "related": []}, {"title": "npm install (package) --save-option", "type": ["definition"], "description": "npm install (package) --save-option means the project is directly dependent on ", "keywords": [], "past": [38, 40], "future": [], "id": 42, "related": []}, {"title": "Javascript package folder", "type": ["definition"], "description": "package ", "keywords": [], "past": [5], "future": [38, 44, 45], "id": 43, "related": []}, {"title": "node_modules", "type": ["definition"], "description": "node_modules are dependencies installed for npm install packages ", "keywords": [], "past": [43, 40], "future": [], "id": 44, "related": []}, {"title": "lite-server", "type": ["definition", "Javascript package"], "description": "lite-server will go in node module ", "keywords": [], "past": [40, 41, 43], "future": [], "id": 45, "related": []}, {"title": "scripts", "type": ["definition", "package.json"], "description": "scripts is a pointer to commands", "keywords": [], "past": [38], "future": [], "id": 46, "related": []}, {"title": "lite", "type": ["definition", ""], "description": "lite: lite-server ", "keywords": [], "past": [38], "future": [], "id": 47, "related": []}, {"title": "complex manipulations of the Dom", "type": ["implication"], "description": "when you need complex manipulations of the DOM, it gets fairly complicated and which is where Javascript libraries and frameworks shine ", "keywords": [], "past": [1], "future": [5], "id": 48, "related": []}, {"title": "frameworks for Javascript", "type": ["definition"], "description": "frameworks for Javascript are needed to help structure our web application ", "keywords": [], "past": [5, 50], "future": [54, 55], "id": 49, "related": []}, {"title": "capture a standard set of functionality", "type": ["implication"], "description": "capture a standard set of functionality", "keywords": [], "past": [5], "future": [49, 51], "id": 50, "related": []}, {"title": "software library", "type": ["definition"], "description": "a software library gives you a well-defined collection of implementations or repeated behaviors that you can use to quickly implement complicated applications ", "keywords": [], "past": [50], "future": [53, 59], "id": 51, "related": []}, {"title": "web application ", "type": ["definition"], "description": "web application ", "keywords": [], "past": [53, 54, 61], "future": [], "id": 52, "related": []}, {"title": "leveraging a software library for implementing web applications then simply calls on the functions to accomplish some repeated common behavior", "type": ["implication"], "description": "when you leverage a library for implementing web applications, your code is in charge and then simply calls upon the functions provided by the library in order to accomplish some repeated common behavior ", "keywords": [], "past": [51], "future": [52], "id": 53, "related": []}, {"title": "framework is a particular implementation of a web application where the framework provides generic functionality and your code fills in the details", "type": ["implication"], "description": "a framework is a particular implementation of a web application where the framework provides generic functionality and your code fills in the details in order to customize that framework for accomplishing the specific application functionality that you want to implement ", "keywords": [], "past": [49, 55], "future": [52], "id": 54, "related": []}, {"title": "implementation of framework", "type": ["definition"], "description": "a framework is implemented ", "keywords": [], "past": [49], "future": [54, 56, 62], "id": 55, "related": []}, {"title": "principle of framework is that it decides when and where code is called", "type": ["definition"], "description": "one of the principles of how a framework is implemented is the Hollywood Principle ", "keywords": [], "past": [55], "future": [57, 58], "id": 56, "related": []}, {"title": "imperative framework", "type": ["definition"], "description": "imperative framework is when you specify clearly step by step how it needs to be accomplished ", "keywords": [], "past": [56], "future": [], "id": 57, "related": []}, {"title": "declarative approach", "type": ["definition"], "description": "declarative approach specifies what you want to accomplish but then leaves the details up to the framework to decide how it is going to be accomplished ", "keywords": [], "past": [56], "future": [59], "id": 58, "related": []}, {"title": "React", "type": ["definition"], "description": "React is called a library and also uses the declarative approach ", "keywords": [], "past": [51, 58, 62], "future": [60, 61, 73, 64, 83, 116, 87, 190], "id": 59, "related": []}, {"title": "Components", "type": ["definition"], "description": "Components encapsulate behaviors into small units ", "keywords": [], "past": [59, 73], "future": [63, 67, 80, 82, 83, 85, 98, 149, 191, 198, 199], "id": 60, "related": []}, {"title": "React makes no assumptions about the entire technology stack that you're goingt o use for implementing your Web applications ", "type": ["implication"], "description": "React makes no assumptions about the entire technology stack that you're goingt o use for implementing your Web applications ", "keywords": [], "past": [59], "future": [52], "id": 61, "related": []}, {"title": "react is designed for speed of implementing the application simplicity and scalibility ", "type": ["implication"], "description": "react is designed for speed of implementing the application simplicity and scalibility ", "keywords": [], "past": [55], "future": [59], "id": 62, "related": []}, {"title": "props", "type": ["definition"], "description": "a component takes in parameters called props and returns a hierarchy of views to display via the render method ", "keywords": [], "past": [60, 85, 173], "future": [83, 86, 89, 99, 146, 194, 195, 200], "id": 63, "related": []}, {"title": "render()", "type": ["definition", "method"], "description": "render method returns a description of what you want to see on the screen, rReact takes the description and displays the result. In particular, render returns a React element, which is a lightweight description of what to render. ", "keywords": [], "past": [59], "future": [75, 73, 91, 93, 120], "id": 64, "related": []}, {"title": "JSX", "type": ["definition", ""], "description": "Most React developers use a special syntax called \u201cJSX\u201d which makes these structures easier to write. The <div /> syntax is transformed at build time to React.createElement('div'). ", "keywords": [], "past": [5], "future": [67, 69, 72], "id": 65, "related": []}, {"title": "You can put any valid JavaScript expression inside the curly braces in JSX ", "type": ["definition", "JSX"], "description": "You can put any valid JavaScript expression inside the curly braces in JSX ", "keywords": [], "past": [69], "future": [67, 121, 126, 127], "id": 66, "related": []}, {"title": "compose and render React components with JSX", "type": ["definition"], "description": "you can add components within JSX brackets to compose and render React components ", "keywords": [], "past": [65, 66, 60, 83, 178], "future": [84], "id": 67, "related": []}, {"title": "use quotes to specify string literals as attributes ", "type": ["definition"], "description": "use quotes to specify string literals as attributes ", "keywords": [], "past": [69], "future": [83], "id": 68, "related": []}, {"title": "JSX syntax <> ", "type": ["definition"], "description": "JSX syntax <> ", "keywords": [], "past": [65], "future": [66, 68, 70, 71], "id": 69, "related": []}, {"title": "can terminate early with /> definition ", "type": ["definition", "JSX"], "description": "can terminate early with /> definition ", "keywords": [], "past": [69], "future": [], "id": 70, "related": []}, {"title": "JSX tags contain children through nested tags ", "type": ["definition", "JSX"], "description": "JSX tags contain children through nested tags ", "keywords": [], "past": [69], "future": [98], "id": 71, "related": []}, {"title": "Babel compiles JSX down to React.createElement() calls ", "type": ["definition"], "description": "Babel compiles JSX down to React.createElement() calls ", "keywords": [], "past": [65], "future": [73], "id": 72, "related": []}, {"title": "React elements ", "type": ["definition", "React"], "description": "React elements ", "keywords": [], "past": [59, 72, 64], "future": [60, 74, 75, 76], "id": 73, "related": []}, {"title": "root DOM node", "type": ["definition"], "description": "<div id = \"root\"></div> is a root DOM node because everything inside it will be managed by React DOM  ", "keywords": [], "past": [73], "future": [75], "id": 74, "related": []}, {"title": "ReactDOM.render() a React element into a root DOM node", "type": ["definition"], "description": "render a react element into a root DOM node, pass both to ReactDOM.render() ", "keywords": [], "past": [64, 73, 74], "future": [77], "id": 75, "related": []}, {"title": "immutable", "type": ["definition"], "description": "React elements are immutable ", "keywords": [], "past": [73], "future": [77], "id": 76, "related": []}, {"title": "the only way to update an element is by ReactDOM.render() ", "type": ["definition"], "description": "the only way to update an element is by ReactDOM.render() ", "keywords": [], "past": [76, 75], "future": [78, 79], "id": 77, "related": []}, {"title": "In practice, most React apps only call ReactDOM.render() once ", "type": ["definition"], "description": "In practice, most React apps only call ReactDOM.render() once ", "keywords": [], "past": [77], "future": [], "id": 78, "related": []}, {"title": "React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state React DOM only updates when necessary ", "type": ["definition", "React"], "description": "React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state React DOM only updates when necessary ", "keywords": [], "past": [77], "future": [], "id": 79, "related": []}, {"title": "define a component by writing a Javascript function", "type": ["definition"], "description": "simplest way to define a component is to write a Javascript function ", "keywords": [], "past": [15, 60], "future": [83], "id": 80, "related": []}, {"title": "ES6 class ", "type": ["definition"], "description": "ES6 class ", "keywords": [], "past": [5], "future": [82], "id": 81, "related": []}, {"title": "use a ES6 class to define a component ", "type": ["definition"], "description": "use a ES6 class to define a component ", "keywords": [], "past": [81, 60], "future": [83, 89, 90], "id": 82, "related": []}, {"title": "when react sees an element representing a user-defined component, it passes JSX attributes to this component as a single object called props ", "type": ["definition"], "description": "when react sees an element representing a user-defined component, it passes JSX attributes to this component as a single object called props ", "keywords": [], "past": [59, 63, 68, 60, 80, 82], "future": [67], "id": 83, "related": []}, {"title": "composing components", "type": ["definition", "endd"], "description": "can compose components ", "keywords": [], "past": [67, 98, 147, 178], "future": [148], "id": 84, "related": []}, {"title": "extracting components will be useful to have a palette of reusable components ", "type": ["definition"], "description": "extracting components will be useful to have a palette of reusable components ", "keywords": [], "past": [60, 98], "future": [63, 123], "id": 85, "related": []}, {"title": "props are read only ", "type": ["definition"], "description": "props are read only ", "keywords": [], "past": [63], "future": [], "id": 86, "related": []}, {"title": "state ", "type": ["definition", "React"], "description": "state ", "keywords": [], "past": [59], "future": [88, 93, 94, 95, 96, 97, 99, 161], "id": 87, "related": []}, {"title": "add a class constructor that assigns the initial this.state ", "type": ["definition"], "description": "add a class constructor that assigns the initial this.state ", "keywords": [], "past": [87, 89], "future": [], "id": 88, "related": []}, {"title": "React class constructor ", "type": ["definition", "React"], "description": "React class constructor ", "keywords": [], "past": [82, 63], "future": [88], "id": 89, "related": []}, {"title": "lifecycle methods to a class ", "type": ["definition", "React"], "description": "lifecycle methods to a class ", "keywords": [], "past": [82], "future": [91], "id": 90, "related": []}, {"title": "mounting", "type": ["definition", "React"], "description": "mounting in React uses componentDidMount(), runs after the component has been rendered to the DOM", "keywords": [], "past": [90, 64], "future": [92, 199], "id": 91, "related": []}, {"title": "unmounting", "type": ["definition", "React"], "description": "unmounting in React ", "keywords": [], "past": [91], "future": [], "id": 92, "related": []}, {"title": "setState()", "type": ["definition", "React"], "description": "setState() informs React that the state has been changed, and will call rrender  again and change the state given the attributes ", "keywords": [], "past": [87, 64], "future": [94, 95, 96, 141, 199], "id": 93, "related": []}, {"title": "do not modify state directly ", "type": ["definition", "React"], "description": "do not modify state directly ", "keywords": [], "past": [93, 87], "future": [], "id": 94, "related": []}, {"title": "state updates may be asynchronous", "type": ["definition", "state", "React"], "description": "state updates may be asynchronous, as React may batch multiple setState() calls into a single update for performance ", "keywords": [], "past": [93, 87], "future": [], "id": 95, "related": []}, {"title": "state updates are merged ", "type": ["definition", "React"], "description": "state updates are merged ", "keywords": [], "past": [93, 87], "future": [], "id": 96, "related": []}, {"title": "state is often local or encapsulated", "type": ["definition", "React"], "description": "state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it. ", "keywords": [], "past": [87, 23], "future": [99], "id": 97, "related": []}, {"title": "child components ", "type": ["definition"], "description": "child components ", "keywords": [], "past": [24, 23, 60, 71], "future": [85, 84, 99, 135, 145, 146, 197], "id": 98, "related": []}, {"title": "a component may choose to pass its state down as props to its child components ", "type": ["definition", "React"], "description": "a component may choose to pass its state down as props to its child components ", "keywords": [], "past": [87, 98, 97, 63], "future": [145], "id": 99, "related": []}, {"title": "events", "type": ["definition"], "description": "events ", "keywords": [], "past": [5], "future": [101, 102, 115, 116, 154], "id": 100, "related": []}, {"title": "event handler", "type": ["definition"], "description": "events have an event handler, usually a function in javascript ", "keywords": [], "past": [100, 15], "future": [103, 104, 108, 110, 143], "id": 101, "related": [102]}, {"title": "event listeners ", "type": ["definition"], "description": "event listeners ", "keywords": [], "past": [100], "future": [103, 119, 187, 106], "id": 102, "related": [101]}, {"title": "registering an event handler ", "type": ["definition", "events"], "description": "registering an event handler ", "keywords": [], "past": [101, 102], "future": [104, 105, 107, 109, 111, 112, 113], "id": 103, "related": []}, {"title": ".onclick ", "type": ["definition", "events"], "description": ".onclick is the event handler property being used in this situation. It is essentially a property like any other available on the button (e.g. btn.textContent, or btn.style), but it is a special type \u2014 when you set it to be equal to some code, that code will be run when the event fires on the button. ", "keywords": [], "past": [101, 103], "future": [], "id": 104, "related": []}, {"title": "don't use inline event handlers ", "type": ["definition", "events"], "description": "don't use inline event handlers ", "keywords": [], "past": [103], "future": [], "id": 105, "related": []}, {"title": "addEventListener() ", "type": ["definition", "events"], "description": "addEventListener() ", "keywords": [], "past": [102], "future": [], "id": 106, "related": []}, {"title": "removeEventListener() ", "type": ["definition", "events"], "description": "removeEventListener() ", "keywords": [], "past": [103], "future": [], "id": 107, "related": []}, {"title": "event objects", "type": ["definition", "events"], "description": "event objects can be passed to the event handler ", "keywords": [], "past": [101, 173], "future": [], "id": 108, "related": []}, {"title": "e.target ", "type": ["definition", "events"], "description": "e.target ", "keywords": [], "past": [103], "future": [110, 113], "id": 109, "related": []}, {"title": "prevent default behavior with e.preventDefault() ", "type": ["definition", "events"], "description": "prevent default behavior with e.preventDefault() ", "keywords": [], "past": [109, 101], "future": [114], "id": 110, "related": []}, {"title": "event bubbling ", "type": ["definition", "events"], "description": "event bubbling checks event handlers from inner to outer", "keywords": [], "past": [24, 103], "future": [], "id": 111, "related": []}, {"title": "event capturing", "type": ["definition", "events"], "description": "event capturing checks event handlers from outer to inner ", "keywords": [], "past": [24, 103], "future": [], "id": 112, "related": []}, {"title": "stopPropagation()", "type": ["definition"], "description": "stopPropagation() when invoked on handler's event object makes it so that the handler is run ", "keywords": [], "past": [109, 103], "future": [], "id": 113, "related": []}, {"title": "in react you must call preventDefault explicitly", "type": ["definition", "React"], "description": "Another difference is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. ", "keywords": [], "past": [110, 116], "future": [], "id": 114, "related": []}, {"title": "HTML and React event handler syntax is different ", "type": ["definition", "events", "React"], "description": "HTML and React event handler syntax is different ", "keywords": [], "past": [1, 100, 116], "future": [], "id": 115, "related": []}, {"title": "React event handling ", "type": ["definition", "React", "events"], "description": "React event handling ", "keywords": [], "past": [100, 59], "future": [114, 115, 119], "id": 116, "related": []}, {"title": "bind()", "type": ["definition", "Javascript"], "description": "bind(thisArg) will bind to this ", "keywords": [], "past": [25], "future": [118], "id": 117, "related": []}, {"title": "in javascript, class methods are not bound by default", "type": ["definition", "javascript"], "description": "in javascript, class methods are not bound by default  If you forget to bind this.handleClick and pass it to onClick, this will be undefined when the function is actually called. ", "keywords": [], "past": [117], "future": [], "id": 118, "related": []}, {"title": "provide a lstener when the element is initially rendered", "type": ["definition", "React", "events"], "description": "in React, you don't need to call addEventListener. Instead, just provide a listener when the element is initially rendered ", "keywords": [], "past": [116, 102], "future": [], "id": 119, "related": []}, {"title": "conditional rendering in React ", "type": ["definition", "React"], "description": "conditional rendering in React ", "keywords": [], "past": [64, 121, 122], "future": [123], "id": 120, "related": []}, {"title": "inline conditions in JSX ", "type": ["definition", "JSX"], "description": "inline conditions in JSX ", "keywords": [], "past": [66], "future": [120, 122], "id": 121, "related": []}, {"title": "true && expression always evaluates to expression, and false && expression always evaluates to false. ", "type": ["implication"], "description": "true && expression always evaluates to expression, and false && expression always evaluates to false. ", "keywords": [], "past": [121], "future": [120], "id": 122, "related": []}, {"title": "whenever conditions become too complex, it might be a good time to extract a component", "type": ["definition", "implication", "React", "conditonal"], "description": "whenever conditions become too complex, it might be a good time to extract a component ", "keywords": [], "past": [120, 85], "future": [], "id": 123, "related": []}, {"title": "lists", "type": ["definition", "Javascript"], "description": "lists ", "keywords": [], "past": [5], "future": [125, 126, 127, 176], "id": 124, "related": []}, {"title": "map()", "type": ["definition", "function"], "description": "map() function takes an array and propagates a function to each element ", "keywords": [], "past": [124], "future": [], "id": 125, "related": []}, {"title": "build collections of elements and include them in JSX using curly braces ", "type": ["definition", "JSX", "Javascript"], "description": "build collections of elements and include them in JSX using curly braces ", "keywords": [], "past": [124, 66, 129], "future": [130, 133], "id": 126, "related": []}, {"title": "include entire listItems array inside <ul> element ", "type": ["definition", "Javascript", "JSX"], "description": "include entire listItems array inside <ul> element ", "keywords": [], "past": [66, 124, 128], "future": [], "id": 127, "related": []}, {"title": "<ul>", "type": ["HTML", "definition"], "description": "<ul> is a list element ", "keywords": [], "past": [7, 129], "future": [127], "id": 128, "related": []}, {"title": "<li>", "type": ["definition", "HTML tag"], "description": "<li> are individual members of a list ", "keywords": [], "past": [7], "future": [126, 128], "id": 129, "related": []}, {"title": "key for lists of React elements", "type": ["definition", "React"], "description": "a key is a special string attribute you need to include when creating lists of elements ", "keywords": [], "past": [126, 131, 133], "future": [132, 134], "id": 130, "related": []}, {"title": "string", "type": ["Javascript", "definition"], "description": "string ", "keywords": [], "past": [5], "future": [130, 150], "id": 131, "related": []}, {"title": "keys help React identify which items have changed, are added, or are removed", "type": ["implication", "React"], "description": "Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity ", "keywords": [], "past": [130], "future": [], "id": 132, "related": []}, {"title": "keep the key on the item elements rather than the <li> element", "type": ["definition", "React"], "description": "you should keep the key on the <ListItem /> elements in the array rather than on the <li> element in the ListItem itself ", "keywords": [], "past": [126], "future": [130], "id": 133, "related": []}, {"title": "keys must only be unique among siblings", "type": ["definition", "React"], "description": "keys must only be unique among siblings, they don't need to be globally unique ", "keywords": [], "past": [130], "future": [135], "id": 134, "related": []}, {"title": "Keys serve as a hint to React but they don\u2019t get passed to your components", "type": ["definition", "React"], "description": "keys serve as a hint to React but they don't get passed to your components. If you need the same value in your component pass it explicitly as a prop with a different name ", "keywords": [], "past": [134, 98], "future": [], "id": 135, "related": []}, {"title": "Redux ", "type": ["definition", "Redux"], "description": "Redux ", "keywords": [], "past": [5], "future": [137, 139, 159, 161, 190], "id": 136, "related": []}, {"title": "actions ", "type": ["definition", "Redux"], "description": "actions ", "keywords": [], "past": [136], "future": [138, 150, 152, 153, 160, 159, 171], "id": 137, "related": []}, {"title": "send data from your application to your store", "type": ["Redux", "definition"], "description": "actions are payloads of information that send data from your application to your store. They are the only source of information for your store ", "keywords": [], "past": [137, 139], "future": [], "id": 138, "related": []}, {"title": "store", "type": ["definition", "Redux"], "description": "store ", "keywords": [], "past": [136, 161], "future": [154, 160, 138, 181, 182, 184, 187, 189, 194, 197, 198, 200], "id": 139, "related": []}, {"title": "form elements typically manage their own state", "type": ["definition", "HTML tag", "HTML"], "description": "In HTML, form elements such as <input>, <textarea>, and <select> typically maintain their own state and update it based on user input ", "keywords": [], "past": [7], "future": [142], "id": 140, "related": []}, {"title": "mutable state is typically kept in the state property of components, and only updated with setState()", "type": ["definition", "React"], "description": "In React, mutable state is typically kept in the state property of components, and only updated with setState() ", "keywords": [], "past": [93], "future": [142], "id": 141, "related": []}, {"title": "controlled component", "type": ["definition", "React"], "description": "We can combine the two by making the React state be the \u201csingle source of truth\u201d. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a \u201ccontrolled component\u201d ", "keywords": [], "past": [141, 140], "future": [143], "id": 142, "related": []}, {"title": "every state mutation will have an associated handler function", "type": ["definition", "React"], "description": "With a controlled component, every state mutation will have an associated handler function ", "keywords": [], "past": [142, 101], "future": [144, 145], "id": 143, "related": []}, {"title": "makes it straightforward to modify or validate user input ", "type": ["definition", "React"], "description": "makes it straightforward to modify or validate user input ", "keywords": [], "past": [143], "future": [], "id": 144, "related": []}, {"title": "lifting state up", "type": ["definition", "React"], "description": "sharing state is accomplished by moving state up to the closest common ancestor of the components that need it or lifting state up ", "keywords": [], "past": [99, 98, 143], "future": [], "id": 145, "related": []}, {"title": "props.children ", "type": ["definition", "React"], "description": "props.children ", "keywords": [], "past": [98, 63], "future": [147], "id": 146, "related": []}, {"title": "containment", "type": ["implication", "React"], "description": "containment allows other components to pass arbitrary children to components and nest the JSX ", "keywords": [], "past": [146], "future": [84], "id": 147, "related": []}, {"title": "React composition is better than inheritance ", "type": ["definition", "React"], "description": "React composition is better than inheritance ", "keywords": [], "past": [84, 178], "future": [], "id": 148, "related": []}, {"title": "single responsibility principle", "type": ["definition", "React", "endd"], "description": "single responsibility principle means a component should ideally only do one thing ", "keywords": [], "past": [60], "future": [], "id": 149, "related": []}, {"title": "type", "type": ["definition", "Redux", "actions"], "description": "actions must have a type property that indicates the typpe of action being performed. types are usually string constants ", "keywords": [], "past": [137, 131], "future": [151], "id": 150, "related": []}, {"title": "why define type constants?", "type": ["question"], "description": "You don't have to define action type constants in a separate file, or even to define them at all. For a small project, it might be easier to just use string literals for action types. However, there are some benefits to explicitly declaring constants in larger codebases. Read Reducing Boilerplate for more practical tips on keeping your codebase clean. ", "keywords": [], "past": [150], "future": [], "id": 151, "related": []}, {"title": "pass as little data in each action as possible ", "type": ["definition"], "description": "pass as little data in each action as possible ", "keywords": [], "past": [137], "future": [], "id": 152, "related": []}, {"title": "action creators", "type": ["definition", "Redux", "actions", "action"], "description": "action creators are functions that create actions in redux action creators simply return an action ", "keywords": [], "past": [137], "future": [155, 158, 242], "id": 153, "related": []}, {"title": "dispatch()", "type": ["definition", "events", "Redux", "store"], "description": "dispatch() is a event firer ", "keywords": [], "past": [139, 100], "future": [155, 195], "id": 154, "related": []}, {"title": "have to initiate the dispatch by passing the result of the action creator into dispatch ", "type": ["implication", "Redux", "action", "events"], "description": "have to initiate the dispatch by passing the result of the action creator into dispatch ", "keywords": [], "past": [153, 154], "future": [156, 186], "id": 155, "related": []}, {"title": "bound action creator", "type": ["definition", "action creator", "Reddux", "Redux"], "description": "bound action creator that automatically dispatches through arrow functions ", "keywords": [], "past": [155, 157], "future": [], "id": 156, "related": []}, {"title": "arrow functions", "type": ["definition", "Javascript", "function"], "description": "arrow functions", "keywords": [], "past": [15], "future": [156], "id": 157, "related": []}, {"title": "Action creators can also be asynchronous and have side-effects ", "type": ["definition", "action", "Redux"], "description": "Action creators can also be asynchronous and have side-effects ", "keywords": [], "past": [153], "future": [], "id": 158, "related": []}, {"title": "reducers ", "type": ["definition", "reducers", "Redux"], "description": "The reducer is a pure function that takes the previous state and an action, and returns the next state", "keywords": [], "past": [136, 161, 137, 15, 165, 167], "future": [160, 164, 166, 168, 171, 172, 175, 177], "id": 159, "related": []}, {"title": "Reducers specify how the application's state changes in response to actions sent to the store ", "type": ["implication"], "description": "Reducers specify how the application's state changes in response to actions sent to the store ", "keywords": [], "past": [159, 137, 139], "future": [186], "id": 160, "related": []}, {"title": "application state is stored as a single object", "type": ["definition", "Redux"], "description": "in redux the application state is stored as a single object ", "keywords": [], "past": [87, 136, 173], "future": [162, 159, 172, 175, 179, 181, 139, 185], "id": 161, "related": []}, {"title": "state tree", "type": ["definition", "Redux", "endd"], "description": "You'll often find that you need to store some data, as well as some UI state, in the state tree. This is fine, but try to keep the data separate from the UI state. ", "keywords": [], "past": [161], "future": [163, 188, 189], "id": 162, "related": []}, {"title": "think of state as a database", "type": ["implication"], "description": "In a more complex app, you're going to want different entities to reference each other. We suggest that you keep your state as normalized as possible, without any nesting. Keep every entity in an object stored with an ID as a key, and use IDs to reference it from other entities, or lists. Think of the app's state as a database. ", "keywords": [], "past": [162], "future": [], "id": 163, "related": []}, {"title": "never mutate the arguments inside a reducer ", "type": ["definition", "Reddux", "Redux", "reducers"], "description": "never mutate the arguments inside a reducer ", "keywords": [], "past": [159], "future": [], "id": 164, "related": []}, {"title": "reduce() ", "type": ["definition", "Javascript", "function"], "description": "reduce() ", "keywords": [], "past": [15], "future": [159], "id": 165, "related": []}, {"title": "never perform side effects like API calls and routing transitions inside a reducer ", "type": ["definition", "Redux", "reducers"], "description": "never perform side effects like API calls and routing transitions inside a reducer ", "keywords": [], "past": [159], "future": [], "id": 166, "related": []}, {"title": "pure function ", "type": ["definition", "function", "Javascript"], "description": "pure function ", "keywords": [], "past": [15], "future": [159], "id": 167, "related": []}, {"title": "never call non pure functions like Math.random() ", "type": ["definition", "Javascript", "Redux", "reducers"], "description": "never call non pure functions like Math.random() ", "keywords": [], "past": [159], "future": [], "id": 168, "related": []}, {"title": "default function arguments", "type": ["definition", "function", "Javascript"], "description": "function has default argument where function(d = default, ...) ", "keywords": [], "past": [17], "future": [170], "id": 169, "related": []}, {"title": "switch()", "type": ["definition", "Javascript", "function"], "description": "switch() has different cases  ", "keywords": [], "past": [169, 15, 230], "future": [171], "id": 170, "related": []}, {"title": "can use switch to deal with many actions in reducer ", "type": ["definition"], "description": "can use switch to deal with many actions in reducer ", "keywords": [], "past": [170, 137, 159], "future": [175], "id": 171, "related": []}, {"title": "don't mutate the state", "type": ["definition", "Redux", "reducers"], "description": "we don't mutate the state, instead we use Object.assign() with an empty object as a first parameter ", "keywords": [], "past": [159, 161, 174, 176], "future": [], "id": 172, "related": []}, {"title": "Object ", "type": ["definition", "Javascript", "object"], "description": "JavaScript objects can be thought of as simple collections of name-value pairs.", "keywords": [], "past": [5], "future": [25, 63, 108, 161, 174, 176], "id": 173, "related": []}, {"title": "Object.assign()", "type": ["definition", "object", "Javascript"], "description": "Object.assign() creates a copy of the object ", "keywords": [], "past": [173], "future": [172], "id": 174, "related": []}, {"title": "return the previous state in the default ase", "type": ["definition", "Redux"], "description": "we return the previous state in the default case ", "keywords": [], "past": [159, 161, 171], "future": [], "id": 175, "related": []}, {"title": "spread()", "type": ["definition", "function"], "description": "spread() operator copies enumerable properties from one object to another in a more succint way and copies the properties to a new object ", "keywords": [], "past": [124, 173], "future": [172], "id": 176, "related": []}, {"title": "reducer composition ", "type": ["definition", "Redux"], "description": "reducer composition ", "keywords": [], "past": [159, 178], "future": [179, 183], "id": 177, "related": []}, {"title": "composition ", "type": ["definition", "Javascript"], "description": "composition ", "keywords": [], "past": [1, 4, 5], "future": [67, 148, 177, 84, 180], "id": 178, "related": []}, {"title": "each reducer will manage its own part of the global state", "type": ["definition", "reducer", "Redux"], "description": "each of these reducers is managing its own part of the global state. The state parameter is different for every reducer, and corresponds to the part of the state it manages. ", "keywords": [], "past": [177, 161], "future": [], "id": 179, "related": []}, {"title": "combineReducers()", "type": ["definition", "function", "Redux", "Javascript", "reducers"], "description": "Redux combineReducers() ", "keywords": [], "past": [15, 178], "future": [184, 188], "id": 180, "related": []}, {"title": "getState()", "type": ["definition", "function", "store", "Redux", "Javascript"], "description": "allows access to state via getState() ", "keywords": [], "past": [161, 139], "future": [], "id": 181, "related": []}, {"title": "single store in a redux application", "type": ["definition", "store", "redux"], "description": "only have a single store in a redux application ", "keywords": [], "past": [139], "future": [183], "id": 182, "related": []}, {"title": "When you want to split your data handling logic, you'll use reducer composition instead of many stores ", "type": ["implication", "reducer", "store"], "description": "When you want to split your data handling logic, you'll use reducer composition instead of many stores ", "keywords": [], "past": [182, 177], "future": [], "id": 183, "related": []}, {"title": "createStore()", "type": ["store", "definition", "function", "Javascript", "Redux"], "description": "createStore() creates a store and also can use combineReducers() to coreate initial state ", "keywords": [], "past": [180, 139], "future": [185, 198], "id": 184, "related": []}, {"title": "can create initial state in createStore()", "type": ["definition", "function", "store", "Redux", "Javascript"], "description": "may initially create a state, is useful for hydrating the state of the client to match the state of a Redux application running on the server ", "keywords": [], "past": [19, 17, 184, 161], "future": [], "id": 185, "related": []}, {"title": "dispatch calls an action creator and then the redux store calls the reducer function you gave it", "type": ["definition", "store"], "description": "dispatch calls an action creator and then the redux store calls the reducer function you gave it", "keywords": [], "past": [155, 160], "future": [188], "id": 186, "related": []}, {"title": "subscribe(listener)", "type": ["definition", "events", "store", "Redux", "Javascript"], "description": "registers event listeners via subscribe(listener) ", "keywords": [], "past": [102, 139], "future": [], "id": 187, "related": []}, {"title": "root reducer may combine the output of multiple reducers into a single state tree", "type": ["definition", "reducer", "store", "Redux"], "description": "The root reducer may combine the output of multiple reducers into a single state tree ", "keywords": [], "past": [180, 162, 186], "future": [189], "id": 188, "related": []}, {"title": "the redux store saves the complete next state tree returned by root reducer ", "type": ["definition", "store", "reducer", "Redux"], "description": "the redux store saves the complete next state tree returned by root reducer ", "keywords": [], "past": [188, 139, 162], "future": [], "id": 189, "related": []}, {"title": "react-redux", "type": ["definition", "React", "Redux"], "description": "react bindings are not included in Redux by default. You need to install them explicitly ", "keywords": [], "past": [59, 136, 40], "future": [191, 196, 198, 241, 242, 244, 245], "id": 190, "related": []}, {"title": "react bindings for redux separate presentational components from container components", "type": ["implication", "react", "components"], "description": "react bindings for redux separate presentational components from container components ", "keywords": [], "past": [190, 60], "future": [192, 193], "id": 191, "related": []}, {"title": "presentational components ", "type": ["definiton", "components", "React"], "description": "presentational components ", "keywords": [], "past": [191, 195], "future": [], "id": 192, "related": []}, {"title": "container components", "type": ["definition", "components", "React"], "description": "container components are how things work or data fetching or state updates ", "keywords": [], "past": [191, 196], "future": [197], "id": 193, "related": []}, {"title": "mapStateToProps()", "type": ["definition", "function", "Redux", "React"], "description": "mapStateToProps describes how to transform the current Rredux store state into the props you want to pass ", "keywords": [], "past": [139, 63, 200], "future": [196], "id": 194, "related": []}, {"title": "mapDispatchToProps()", "type": ["function", "definition", "Javascript", "React", "Redux"], "description": "container components can dispatch actions through mapDispatchToProps() where it receives the dispatch() method and returns callback props that you want to inject into the presentational component container ", "keywords": [], "past": [154, 63], "future": [196, 192], "id": 195, "related": []}, {"title": "connect()", "type": ["definition", "React", "Redux", "function"], "description": "connect() can create a container component with mapDispatchToProps() and mapStateToProps(). suggest instead generating container components with the React Redux library's connect() function rather than writing one by hand ", "keywords": [], "past": [190, 194, 195], "future": [193], "id": 196, "related": []}, {"title": "all container components need access to the Redux store so they can subscribe to it ", "type": ["definition", "React", "Redux"], "description": "all container components need access to the Redux store so they can subscribe to it ", "keywords": [], "past": [193, 139, 98], "future": [], "id": 197, "related": []}, {"title": "<Provider>", "type": ["definition", "component", "React", "Redux"], "description": "to avoid prop-drilling, we use Provider in React Redux ", "keywords": [], "past": [60, 139, 184, 190], "future": [], "id": 198, "related": []}, {"title": "when mounting a new component, we can continuously update state with setState() in Clock example ", "type": ["implication", "React"], "description": "when mounting a new component, we can continuously update state with setState() in Clock example ", "keywords": [], "past": [91, 93, 60], "future": [], "id": 199, "related": []}, {"title": "return of the mapStateToProps determine whether the connected component will re-render", "type": ["implication", "Redux", "state", "store"], "description": "The return of the mapStateToProps determine whether the connected component will re-render. it  only re-renders when props or state are  different ", "keywords": [], "past": [139, 63], "future": [194], "id": 200, "related": []}, {"title": "<h1>", "type": ["definition", "HTML tag", "HTML"], "description": "<h1> is heading tag ", "keywords": [], "past": [29], "future": [202], "id": 201, "related": []}, {"title": "<h higher int> creates lower importance", "type": ["definition", "HTML tag", "HTML"], "description": "<h higher int> creates lower importance theoretically <h higher int> creates lower importance ", "keywords": [], "past": [201], "future": [], "id": 202, "related": []}, {"title": "<header>", "type": ["definition", "HTML tag"], "description": "<header> endd endd ", "keywords": [], "past": [29], "future": [], "id": 203, "related": []}, {"title": "<section> ", "type": ["definition", "HTML tag"], "description": "<section> ", "keywords": [], "past": [29, 211], "future": [], "id": 204, "related": []}, {"title": "semantics to distinguish structure ", "type": ["definition", "HTML"], "description": "semantics to distinguish structure ", "keywords": [], "past": [3, 29], "future": [], "id": 205, "related": []}, {"title": "<article> ", "type": ["definition", "HTML tag"], "description": "<article> ", "keywords": [], "past": [29], "future": [], "id": 206, "related": []}, {"title": "<footer> ", "type": ["definition", "HTML tag"], "description": "<footer> ", "keywords": [], "past": [29], "future": [], "id": 207, "related": []}, {"title": "<aside> ", "type": ["definition", "HTML tag"], "description": "<aside> ", "keywords": [], "past": [29], "future": [], "id": 208, "related": []}, {"title": "<a href>", "type": ["definition", "HTML tag"], "description": "<a href> is a link tag and can be local or url ", "keywords": [], "past": [7, 33, 32], "future": [210, 211], "id": 209, "related": []}, {"title": "can encapsulate another div tag or something to add a link ", "type": ["definition", "implication"], "description": "can encapsulate another div tag or something to add a link ", "keywords": [], "past": [209], "future": [], "id": 210, "related": []}, {"title": "can href to different section ids in html tags ", "type": ["implication"], "description": "can href to different section ids in html tags ", "keywords": [], "past": [209], "future": [204], "id": 211, "related": []}, {"title": "Numbers", "type": ["definition", "variable"], "description": "Numbers in JavaScript are \"double-precision 64-bit format IEEE 754 values\", according to the spec. This has some interesting consequences. There's no such thing as an integer in JavaScript, so you have to be a little careful with your arithmetic if you're used to math in C or Java. ", "keywords": [], "past": [13], "future": [215, 216, 218], "id": 212, "related": []}, {"title": "Strings", "type": ["definition", "variables"], "description": "Strings in JavaScript are sequences of Unicode characters. This should be welcome news to anyone who has had to deal with internationalization. More accurately, they are sequences of UTF-16 code units; each code unit is represented by a 16-bit number. Each Unicode character is represented by either 1 or 2 code units. ", "keywords": [], "past": [13], "future": [219, 221], "id": 213, "related": []}, {"title": "+ unary operator", "type": ["definition"], "description": "parseInt() converts a string to an integer with base as an optional second argument ", "keywords": [], "past": [5, 225], "future": [215], "id": 214, "related": []}, {"title": "unary operator to convert values to numbers ", "type": ["definition"], "description": "unary operator to convert values to numbers ", "keywords": [], "past": [214, 212], "future": [], "id": 215, "related": []}, {"title": "NaN", "type": ["definition"], "description": "NaN is returned if number is non-numeric ", "keywords": [], "past": [212], "future": [217, 221], "id": 216, "related": []}, {"title": "isNaN() function ", "type": ["definition"], "description": "isNaN() function ", "keywords": [], "past": [216], "future": [], "id": 217, "related": []}, {"title": "Infinity ", "type": ["definition"], "description": "Infinity ", "keywords": [], "past": [212], "future": [], "id": 218, "related": []}, {"title": "length ", "type": ["definition"], "description": "length ", "keywords": [], "past": [213], "future": [], "id": 219, "related": []}, {"title": "Boolean ", "type": ["definition", "variables"], "description": "Boolean ", "keywords": [], "past": [13], "future": [221], "id": 220, "related": []}, {"title": "false, 0, empty strings, NaN, null, and undefined all become false ", "type": ["definition"], "description": "false, 0, empty strings, NaN, null, and undefined all become false ", "keywords": [], "past": [220, 216, 213], "future": [], "id": 221, "related": []}, {"title": "let", "type": ["definition"], "description": "let allows you to declare block-level variables. The declared variable is available from the block it is enclosed in. ", "keywords": [], "past": [13], "future": [], "id": 222, "related": []}, {"title": "const", "type": ["definition"], "description": "const allows you to declare variables whose values are never intended to change. The variable is available from the block it is declared in. ", "keywords": [], "past": [13], "future": [], "id": 223, "related": []}, {"title": "blocks do not have scope; only functions have a scope", "type": [], "description": "An important difference between JavaScript and other languages like Java is that in JavaScript, blocks do not have scope; only functions have a scope. So if a variable is defined using var in a compound statement (for example inside an if control structure), it will be visible to the entire function. ", "keywords": [], "past": [20, 13], "future": [], "id": 224, "related": []}, {"title": "operators ", "type": ["definition"], "description": "operators ", "keywords": [], "past": [5], "future": [214, 227, 236, 238, 240, 260], "id": 225, "related": []}, {"title": "comparisons", "type": ["definition"], "description": "comparisons in Javascript ", "keywords": [], "past": [5], "future": [227], "id": 226, "related": []}, {"title": "== ", "type": ["definition", "operators"], "description": "== ", "keywords": [], "past": [226, 225], "future": [228, 229], "id": 227, "related": []}, {"title": "== does type coercion ", "type": ["definition", "operator"], "description": "== does type coercion ", "keywords": [], "past": [227], "future": [], "id": 228, "related": []}, {"title": "===", "type": ["definition", "operator"], "description": "=== avoids type coercion ", "keywords": [], "past": [227], "future": [], "id": 229, "related": []}, {"title": "control structures ", "type": ["definition"], "description": "control structures ", "keywords": [], "past": [5], "future": [231, 233, 234, 236, 238, 240, 170], "id": 230, "related": []}, {"title": "if (conditional) {} ", "type": ["definition"], "description": "if (conditional) {} ", "keywords": [], "past": [230], "future": [232], "id": 231, "related": []}, {"title": "else ", "type": ["definition"], "description": "else ", "keywords": [], "past": [231], "future": [], "id": 232, "related": []}, {"title": "while (true) {} ", "type": ["definition"], "description": "while (true) {} ", "keywords": [], "past": [230], "future": [], "id": 233, "related": []}, {"title": "for loop", "type": ["definition"], "description": "for (var i = 0; i < len; i++) { } ", "keywords": [], "past": [230], "future": [235], "id": 234, "related": []}, {"title": "for (let value of array) and for (let property in object) ", "type": ["definition"], "description": "for (let value of array) and for (let property in object) ", "keywords": [], "past": [234], "future": [], "id": 235, "related": []}, {"title": "&& ", "type": ["definition"], "description": "&& ", "keywords": [], "past": [225, 230], "future": [237], "id": 236, "related": []}, {"title": "&& executes both when first option is true ", "type": ["implication"], "description": "&& executes both when first option is true ", "keywords": [], "past": [236], "future": [], "id": 237, "related": []}, {"title": "|| ", "type": ["definition"], "description": "|| ", "keywords": [], "past": [230, 225], "future": [239], "id": 238, "related": []}, {"title": "|| can cach values and also short-circuit if first is true ", "type": ["implication"], "description": "|| can cach values and also short-circuit if first is true ", "keywords": [], "past": [238], "future": [], "id": 239, "related": []}, {"title": "ternary operator ?", "type": ["definition"], "description": "ternary operator = (condition) ? true value : false value ", "keywords": [], "past": [225, 230], "future": [], "id": 240, "related": []}, {"title": "asynchronous actions ", "type": ["definition", "react-redux"], "description": "asynchronous actions ", "keywords": [], "past": [190], "future": [243], "id": 241, "related": []}, {"title": "thunk", "type": ["definition", "react-redux"], "description": "thunk causes an action creator to return a function instead of a action object ", "keywords": [], "past": [190, 153], "future": [243], "id": 242, "related": []}, {"title": "redux thunk middleware ", "type": ["definition", "react-redux"], "description": "redux thunk middleware ", "keywords": [], "past": [242, 241], "future": [], "id": 243, "related": []}, {"title": "<Router />", "type": ["definition"], "description": "<Router /> will match a branch of its routes, and render their configured components. ", "keywords": [], "past": [190], "future": [245], "id": 244, "related": []}, {"title": "<Route />", "type": ["definition", "react-redux"], "description": "<Route /> is used to declaratively map routes to your application's component hierarchy. You would declare in path the path used in the URL and in component the single component to be rendered when the route matches the URL. ", "keywords": [], "past": [190, 244], "future": [], "id": 245, "related": []}, {"title": "arguments", "type": ["definition", "functions", "Javascript"], "description": "arguments is an array-like object holding all of the values passed to the function. ", "keywords": [], "past": [15], "future": [], "id": 246, "related": []}, {"title": "selector", "type": ["definition"], "description": "selector to a HTML tag  ", "keywords": [], "past": [4], "future": [248, 250, 251, 252, 253, 256], "id": 247, "related": []}, {"title": "property ", "type": ["definition", "CSS"], "description": "property ", "keywords": [], "past": [247], "future": [249], "id": 248, "related": []}, {"title": "value", "type": ["definition"], "description": "value ", "keywords": [], "past": [248], "future": [], "id": 249, "related": []}, {"title": "element selector", "type": ["definition", "CSS"], "description": "eelement selector on each element ", "keywords": [], "past": [247], "future": [255], "id": 250, "related": []}, {"title": "class selector", "type": ["definition", "CSS"], "description": "class selector requires a class on tag ", "keywords": [], "past": [247], "future": [255], "id": 251, "related": []}, {"title": "id selector", "type": ["definition", "CSS"], "description": "id selector #name requires id = name ", "keywords": [], "past": [247], "future": [254], "id": 252, "related": []}, {"title": "can combine selectors ", "type": ["definition", "CSs"], "description": "can combine selectors ", "keywords": [], "past": [247], "future": [], "id": 253, "related": []}, {"title": "id is very individual ", "type": ["definition", "CSS"], "description": "id is very individual ", "keywords": [], "past": [252], "future": [], "id": 254, "related": []}, {"title": "combine element and class selectors", "type": ["definition"], "description": "combine element and class selectors with element.class {} syntax ", "keywords": [], "past": [250, 251], "future": [], "id": 255, "related": []}, {"title": "child selector", "type": ["definition"], "description": "child selector is parent > child {} with targeting every child of parent tag ", "keywords": [], "past": [247], "future": [257], "id": 256, "related": []}, {"title": "parent child {} syntax are any children selector ", "type": ["definition", "CSS"], "description": "parent child {} syntax are any children selector ", "keywords": [], "past": [256], "future": [], "id": 257, "related": []}, {"title": "promise ", "type": ["definition", "Javascript"], "description": "promise ", "keywords": [], "past": [5], "future": [259], "id": 258, "related": []}, {"title": "takes a resolve and reject parameters that are functions ", "type": ["definition"], "description": "takes a resolve and reject parameters that are functions ", "keywords": [], "past": [258], "future": [], "id": 259, "related": []}, {"title": "...", "type": ["definition", "operator", "Javascript"], "description": "... spreads an array into its elements ", "keywords": [], "past": [225], "future": [], "id": 260, "related": []}]