[{"title": "HTML", "type": ["definition"], "description": "HTML ", "keywords": [], "past": [], "future": [2, 3, 6, 7, 12, 26, 48], "id": 1, "related": []}, {"title": "annotates content ", "type": ["definition"], "description": "annotates content ", "keywords": [], "past": [1], "future": [], "id": 2, "related": []}, {"title": "defines document structure ", "type": ["definition"], "description": "defines document structure ", "keywords": [], "past": [1], "future": [26, 27], "id": 3, "related": []}, {"title": "CSS ", "type": ["definition"], "description": "CSS ", "keywords": [], "past": [], "future": [], "id": 4, "related": []}, {"title": "Javascript ", "type": ["definition"], "description": "Javascript ", "keywords": [], "past": [48], "future": [11, 13, 15, 20, 36, 43, 49, 50], "id": 5, "related": []}, {"title": "caniuse.com", "type": ["definition"], "description": "caniuse.com will check for you supported features for browsers ", "keywords": [], "past": [1], "future": [], "id": 6, "related": []}, {"title": "HTML tag ", "type": ["definition"], "description": "HTML tag ", "keywords": [], "past": [1], "future": [8, 9, 12, 26, 27, 32], "id": 7, "related": []}, {"title": "opening tag ", "type": ["definition"], "description": "opening tag ", "keywords": [], "past": [7], "future": [10], "id": 8, "related": []}, {"title": "closing tag ", "type": ["definition"], "description": "closing tag ", "keywords": [], "past": [7], "future": [], "id": 9, "related": []}, {"title": "attribute  ", "type": ["definition"], "description": "attribute  ", "keywords": [], "past": [8], "future": [], "id": 10, "related": []}, {"title": "javascript can be run in html with the <script> tag ", "type": ["definition"], "description": "javascript can be run in html with the <script> tag ", "keywords": [], "past": [12, 5], "future": [], "id": 11, "related": []}, {"title": "<script> ", "type": ["definition"], "description": "<script> ", "keywords": [], "past": [1, 7], "future": [11, 28], "id": 12, "related": []}, {"title": "var variables", "type": ["definition"], "description": "variables are starting with  var ", "keywords": [], "past": [5], "future": [14, 17, 18, 24], "id": 13, "related": []}, {"title": "no types are declared for variables ", "type": ["definition"], "description": "no types are declared for variables ", "keywords": [], "past": [13], "future": [], "id": 14, "related": []}, {"title": "function", "type": ["definition"], "description": "function a () {...} or var a = function () {...} definition ", "keywords": [], "past": [5], "future": [16, 17, 18], "id": 15, "related": []}, {"title": "executing a function will have a() or no space after function name ", "type": ["definition"], "description": "executing a function will have a() or no space after function name ", "keywords": [], "past": [15], "future": [], "id": 16, "related": []}, {"title": "can have attributes in function ", "type": ["definition"], "description": "can have attributes in function ", "keywords": [], "past": [15, 13], "future": [19], "id": 17, "related": []}, {"title": "function will return a value with return keyword ", "type": ["definition"], "description": "function will return a value with return keyword ", "keywords": [], "past": [15, 13], "future": [], "id": 18, "related": []}, {"title": "all arguments in a javascript function are optional ", "type": ["definition"], "description": "all arguments in a javascript function are optional ", "keywords": [], "past": [17], "future": [], "id": 19, "related": []}, {"title": "scope ", "type": ["definition"], "description": "scope ", "keywords": [], "past": [5], "future": [21, 22], "id": 20, "related": []}, {"title": "global scope ", "type": ["definition"], "description": "global scope ", "keywords": [], "past": [20], "future": [24], "id": 21, "related": []}, {"title": "lexical scope ", "type": ["definition"], "description": "lexical scope or the curly braces indicate a new scope", "keywords": [], "past": [20], "future": [23], "id": 22, "related": []}, {"title": "execution context", "type": ["definition"], "description": "each execution context has its own variable environment and has a special this object and has a reference to outer environment ", "keywords": [], "past": [22], "future": [24, 25], "id": 23, "related": []}, {"title": "scope chain", "type": [], "description": "scope chain means referenced variable will be searched in its current scope first, then outer, then outer, etc. If not found in global scope, the variable is undefined ", "keywords": [], "past": [23, 21, 13], "future": [], "id": 24, "related": []}, {"title": "this object", "type": ["definition"], "description": "this is refering to window  ", "keywords": [], "past": [23], "future": [], "id": 25, "related": []}, {"title": "<!doctype html>", "type": ["definition"], "description": "every html should have <!doctype html> ", "keywords": [], "past": [3, 1, 7], "future": [], "id": 26, "related": []}, {"title": "<html>", "type": ["definition", "html tag"], "description": "<html> contains the whole html document ", "keywords": [], "past": [7, 3], "future": [29], "id": 27, "related": []}, {"title": "<head>", "type": ["defintion", "html tag"], "description": "<head> tag contains metadata about main content ", "keywords": [], "past": [12], "future": [31], "id": 28, "related": []}, {"title": "<body>", "type": ["definition", "html tag"], "description": "<body> ", "keywords": [], "past": [27], "future": [30], "id": 29, "related": []}, {"title": "<p> paragraph tag ", "type": ["definition", "html tag"], "description": "<p> paragraph tag ", "keywords": [], "past": [29], "future": [], "id": 30, "related": []}, {"title": "<meta>", "type": ["definition", "html tag"], "description": "<meta> metadata tag ", "keywords": [], "past": [28], "future": [], "id": 31, "related": []}, {"title": "block-level elements", "type": ["definition", "HTML"], "description": "block-level elements render to begin on a new line ", "keywords": [], "past": [7], "future": [33, 34], "id": 32, "related": []}, {"title": "inline elements", "type": ["definition"], "description": "inline elements all go in same line, can only contain other inline elements ", "keywords": [], "past": [32], "future": [35], "id": 33, "related": []}, {"title": "<div>", "type": ["definition", "HTML tag"], "description": "<div> is most standard block level element ", "keywords": [], "past": [32], "future": [], "id": 34, "related": []}, {"title": "<span>", "type": ["definition", "HTML tag"], "description": "<span> is the most standard inline element ", "keywords": [], "past": [33], "future": [], "id": 35, "related": []}, {"title": "Node.js", "type": ["definition"], "description": "Node.js is built around an event driven non blocking I/O model which makes it very efficient to run Javascript programs on the desktop and synchronous Javascript on the desktop.  ", "keywords": [], "past": [5], "future": [37, 38], "id": 36, "related": []}, {"title": "npm", "type": ["definition"], "description": "npm or Node package manager is the manager for the node ecosystem that manages all the node modules and packages that have been made public available by many different users ", "keywords": [], "past": [36], "future": [40], "id": 37, "related": []}, {"title": "package.json", "type": ["definition"], "description": "A typical node package consist of JavaScript files together with a file called package.json which is the manifest file for this node module. ", "keywords": [], "past": [36, 43], "future": [39, 41, 42, 46, 47], "id": 38, "related": []}, {"title": "npm init", "type": ["definition"], "description": "npm init creates a package.json file through UI ", "keywords": [], "past": [38], "future": [], "id": 39, "related": []}, {"title": "npm install (package) ", "type": ["definition"], "description": "npm install (package) ", "keywords": [], "past": [37], "future": [41, 42, 44, 45], "id": 40, "related": []}, {"title": "npm install (package) --save-dev", "type": ["definition"], "description": "npm install (package) --save-dev means it is used for development dependency for project ", "keywords": [], "past": [40, 38], "future": [45], "id": 41, "related": []}, {"title": "npm install (package) --save-option", "type": ["definition"], "description": "npm install (package) --save-option means the project is directly dependent on ", "keywords": [], "past": [38, 40], "future": [], "id": 42, "related": []}, {"title": "Javascript package folder", "type": ["definition"], "description": "package ", "keywords": [], "past": [5], "future": [38, 44, 45], "id": 43, "related": []}, {"title": "node_modules", "type": ["definition"], "description": "node_modules are dependencies installed for npm install packages ", "keywords": [], "past": [43, 40], "future": [], "id": 44, "related": []}, {"title": "lite-server", "type": ["definition", "Javascript package"], "description": "lite-server will go in node module ", "keywords": [], "past": [40, 41, 43], "future": [], "id": 45, "related": []}, {"title": "scripts", "type": ["definition", "package.json"], "description": "scripts is a pointer to commands", "keywords": [], "past": [38], "future": [], "id": 46, "related": []}, {"title": "lite", "type": ["definition", ""], "description": "lite: lite-server ", "keywords": [], "past": [38], "future": [], "id": 47, "related": []}, {"title": "complex manipulations of the Dom", "type": ["implication"], "description": "when you need complex manipulations of the DOM, it gets fairly complicated and which is where Javascript libraries and frameworks shine ", "keywords": [], "past": [1], "future": [5], "id": 48, "related": []}, {"title": "frameworks for Javascript", "type": ["definition"], "description": "frameworks for Javascript are needed to help structure our web application ", "keywords": [], "past": [5, 50], "future": [54, 55], "id": 49, "related": []}, {"title": "capture a standard set of functionality", "type": ["implication"], "description": "capture a standard set of functionality", "keywords": [], "past": [5], "future": [49, 51], "id": 50, "related": []}, {"title": "software library", "type": ["definition"], "description": "a software library gives you a well-defined collection of implementations or repeated behaviors that you can use to quickly implement complicated applications ", "keywords": [], "past": [50], "future": [53, 59], "id": 51, "related": []}, {"title": "web application ", "type": ["definition"], "description": "web application ", "keywords": [], "past": [53, 54, 61], "future": [], "id": 52, "related": []}, {"title": "leveraging a software library for implementing web applications then simply calls on the functions to accomplish some repeated common behavior", "type": ["implication"], "description": "when you leverage a library for implementing web applications, your code is in charge and then simply calls upon the functions provided by the library in order to accomplish some repeated common behavior ", "keywords": [], "past": [51], "future": [52], "id": 53, "related": []}, {"title": "framework is a particular implementation of a web application where the framework provides generic functionality and your code fills in the details", "type": ["implication"], "description": "a framework is a particular implementation of a web application where the framework provides generic functionality and your code fills in the details in order to customize that framework for accomplishing the specific application functionality that you want to implement ", "keywords": [], "past": [49, 55], "future": [52], "id": 54, "related": []}, {"title": "implementation of framework", "type": ["definition"], "description": "a framework is implemented ", "keywords": [], "past": [49], "future": [54, 56, 62], "id": 55, "related": []}, {"title": "principle of framework is that it decides when and where code is called", "type": ["definition"], "description": "one of the principles of how a framework is implemented is the Hollywood Principle ", "keywords": [], "past": [55], "future": [57, 58], "id": 56, "related": []}, {"title": "imperative framework", "type": ["definition"], "description": "imperative framework is when you specify clearly step by step how it needs to be accomplished ", "keywords": [], "past": [56], "future": [], "id": 57, "related": []}, {"title": "declarative approach", "type": ["definition"], "description": "declarative approach specifies what you want to accomplish but then leaves the details up to the framework to decide how it is going to be accomplished ", "keywords": [], "past": [56], "future": [59], "id": 58, "related": []}, {"title": "React", "type": ["definition"], "description": "React is called a library and also uses the declarative approach ", "keywords": [], "past": [51, 58, 62], "future": [60, 61], "id": 59, "related": []}, {"title": "Components", "type": ["definition"], "description": "Components encapsulate behaviors into small units ", "keywords": [], "past": [59], "future": [], "id": 60, "related": []}, {"title": "React makes no assumptions about the entire technology stack that you're goingt o use for implementing your Web applications ", "type": ["implication"], "description": "React makes no assumptions about the entire technology stack that you're goingt o use for implementing your Web applications ", "keywords": [], "past": [59], "future": [52], "id": 61, "related": []}, {"title": "react is designed for speed of implementing the application simplicity and scalibility ", "type": ["implication"], "description": "react is designed for speed of implementing the application simplicity and scalibility ", "keywords": [], "past": [55], "future": [59], "id": 62, "related": []}]