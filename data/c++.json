[{"title": "UNIX ", "type": ["definition", "UNIX"], "description": "UNIX ", "keywords": [], "past": [2], "future": [], "id": 1, "related": []}, {"title": "C", "type": ["definition", "C"], "description": "C ", "keywords": [], "past": [4], "future": [1, 3, 8, 9, 10, 11, 12, 13, 14, 18, 30, 37, 38, 41, 42, 43, 46, 54, 56], "id": 2, "related": []}, {"title": "To expand from basic programming to", "type": ["operating systems and embedded development.", "definition", "c++"], "description": "Why teach it now? To expand from basic programming to operating systems and embedded development. ", "keywords": [], "past": [2], "future": [], "id": 3, "related": []}, {"title": "high level language", "type": ["definition"], "description": "HLL language ", "keywords": [], "past": [5], "future": [2], "id": 4, "related": []}, {"title": "assembly language ", "type": ["definition"], "description": "assembly language ", "keywords": [], "past": [6], "future": [4], "id": 5, "related": []}, {"title": "machine code ", "type": ["definition"], "description": "machine code ", "keywords": [], "past": [7], "future": [5, 9], "id": 6, "related": []}, {"title": "inputs to digital system ", "type": ["definition"], "description": "inputs to digital system ", "keywords": [], "past": [], "future": [6, 11], "id": 7, "related": []}, {"title": "no virtual machine so no type checking, array bounds, garbage collection ", "type": ["implication"], "description": "no virtual machine so no type checking, array bounds, garbage collection ", "keywords": [], "past": [2, 12], "future": [33, 65], "id": 8, "related": []}, {"title": "compile source file directly to machine ", "type": ["definition"], "description": "compile source file directly to machine ", "keywords": [], "past": [2, 6], "future": [], "id": 9, "related": []}, {"title": "can often result in faster code ", "type": ["implication"], "description": "can often result in faster code ", "keywords": [], "past": [2], "future": [], "id": 10, "related": []}, {"title": "generally used for  systems programming ", "type": ["implication"], "description": "generally used for  systems programming ", "keywords": [], "past": [2, 7], "future": [], "id": 11, "related": []}, {"title": "C++", "type": ["definition"], "description": "C++ is object-oriented version of C ", "keywords": [], "past": [2], "future": [14, 19, 18, 25, 26, 28, 31, 38, 41, 42, 43, 46, 54, 56, 8, 64, 66, 68], "id": 12, "related": []}, {"title": "files should have a .c file extension ", "type": ["definition"], "description": "files should have a .c file extension ", "keywords": [], "past": [2], "future": [], "id": 13, "related": []}, {"title": "compile the program with a compiler to an executable ", "type": ["definition"], "description": "compile the program with a compiler to an executable ", "keywords": [], "past": [12, 2], "future": [15, 27], "id": 14, "related": []}, {"title": "g++ ", "type": ["definition", "endd"], "description": "g++ ", "keywords": [], "past": [14], "future": [16, 17], "id": 15, "related": []}, {"title": "-g is debug info ", "type": ["definiton"], "description": "-g is debug info ", "keywords": [], "past": [15], "future": [], "id": 16, "related": []}, {"title": "-o", "type": ["definition"], "description": "-o is naming output ", "keywords": [], "past": [15], "future": [], "id": 17, "related": []}, {"title": "variables ", "type": ["definition"], "description": "declare with type name;", "keywords": [], "past": [2, 12], "future": [19, 20, 21, 22, 23, 24, 38, 55, 59, 64, 69, 71, 72, 75, 77], "id": 18, "related": []}, {"title": "in C  you must declare all variables before you can use them ", "type": ["definition"], "description": "in C  you must declare all variables before you can use them ", "keywords": [], "past": [12, 18], "future": [], "id": 19, "related": []}, {"title": "int ", "type": ["definition", "variable"], "description": "int ", "keywords": [], "past": [18], "future": [45, 49, 70], "id": 20, "related": []}, {"title": "float ", "type": ["definition", "variable"], "description": "float ", "keywords": [], "past": [18], "future": [70], "id": 21, "related": []}, {"title": "char ", "type": ["definition", "varaible", "variable"], "description": "char ", "keywords": [], "past": [18], "future": [35], "id": 22, "related": []}, {"title": "operators ", "type": ["definition"], "description": "operators ", "keywords": [], "past": [18], "future": [69], "id": 23, "related": []}, {"title": "type casting", "type": ["definition"], "description": "type casting  definition ", "keywords": [], "past": [18], "future": [], "id": 24, "related": []}, {"title": "conditionals ", "type": ["definition"], "description": "conditionals ", "keywords": [], "past": [12], "future": [], "id": 25, "related": []}, {"title": "loops ", "type": ["definition"], "description": "loops ", "keywords": [], "past": [12], "future": [], "id": 26, "related": []}, {"title": "main()", "type": ["definition"], "description": "main() contains executables  ", "keywords": [], "past": [14], "future": [34, 50], "id": 27, "related": []}, {"title": "scope chain ", "type": ["definition", "c++"], "description": "scope chain ", "keywords": [], "past": [12], "future": [29], "id": 28, "related": []}, {"title": "global scope", "type": [], "description": "global scope is outside of main, accessible to any function ", "keywords": [], "past": [28], "future": [71], "id": 29, "related": []}, {"title": "functions", "type": ["definition"], "description": "functions must be declared before use ", "keywords": [], "past": [2], "future": [31, 44, 67], "id": 30, "related": []}, {"title": "functions in C++: type name(parameters) returns", "type": ["definition"], "description": "functions in C++ can be declared and defined ", "keywords": [], "past": [12, 30], "future": [78], "id": 31, "related": []}, {"title": "arrays ", "type": ["definition"], "description": "arrays ", "keywords": [], "past": [39, 56], "future": [33, 35, 61, 68], "id": 32, "related": []}, {"title": "no bounds checking in C so accessing higher than length array refers to other storage endd ", "type": ["implication"], "description": "no bounds checking in C so accessing higher than length array refers to other storage endd ", "keywords": [], "past": [32, 8], "future": [], "id": 33, "related": []}, {"title": "main ends with return(0) and tells OS that the program exited normally  ", "type": ["implication"], "description": "main ends with return(0) and tells OS that the program exited normally  ", "keywords": [], "past": [27], "future": [], "id": 34, "related": []}, {"title": "strings", "type": ["definition"], "description": "strings ", "keywords": [], "past": [32, 22], "future": [36, 37, 45, 49, 66, 67], "id": 35, "related": []}, {"title": "str[int] = 0 identifies end of string", "type": ["definition", ""], "description": "str[int] = 0 is value of null character '\\0' which identifies end of string ", "keywords": [], "past": [35], "future": [], "id": 36, "related": []}, {"title": "C has built-in string operations ", "type": ["definition"], "description": "C has built-in string operations ", "keywords": [], "past": [2, 35], "future": [], "id": 37, "related": []}, {"title": "structures", "type": ["definition"], "description": "structures are like objects that have member variables but not methods ", "keywords": [], "past": [2, 12, 18], "future": [], "id": 38, "related": []}, {"title": "declare arrays by array[length] ", "type": ["definition"], "description": "declare arrays by array[length] ", "keywords": [], "past": [], "future": [32], "id": 39, "related": []}, {"title": "console i/o is provided by the standard library ", "type": ["definition"], "description": "console i/o is provided by the standard library ", "keywords": [], "past": [41, 42], "future": [44, 49], "id": 40, "related": []}, {"title": "console i/o is #include <stdio.h> ", "type": ["definition"], "description": "console i/o is #include <stdio.h> ", "keywords": [], "past": [2, 12, 47], "future": [40], "id": 41, "related": []}, {"title": "standard library is #include <stdlib.h> ", "type": ["definition"], "description": "standard library is #include <stdlib.h> ", "keywords": [], "past": [12, 2, 47], "future": [40], "id": 42, "related": []}, {"title": "printf(args)", "type": ["definition"], "description": "printf(args) writes to terminal ", "keywords": [], "past": [2, 12], "future": [], "id": 43, "related": []}, {"title": "scanf()", "type": ["definition"], "description": "scanf gets inputs from terminal ", "keywords": [], "past": [30, 40], "future": [], "id": 44, "related": []}, {"title": "atoi converts a string to an int ", "type": ["definition", "function"], "description": "atoi converts a string to an int ", "keywords": [], "past": [35, 20], "future": [48], "id": 45, "related": []}, {"title": "header files ", "type": ["definition"], "description": "header files ", "keywords": [], "past": [12, 2], "future": [47], "id": 46, "related": []}, {"title": "#include", "type": ["definition"], "description": "can insert with #include ", "keywords": [], "past": [46], "future": [41, 42, 66], "id": 47, "related": []}, {"title": "atoi returns 0 for non-integers ", "type": ["definition"], "description": "atoi returns 0 for non-integers ", "keywords": [], "past": [45], "future": [], "id": 48, "related": []}, {"title": "sscanf(string, \"%d\", &r)", "type": ["definition", "function"], "description": "sscanf(string, \"%d\", &r) where r is int can parse in memory strings ", "keywords": [], "past": [40, 35, 20], "future": [], "id": 49, "related": []}, {"title": "parameters to main ", "type": ["definition"], "description": "parameters to main ", "keywords": [], "past": [27], "future": [51, 52], "id": 50, "related": []}, {"title": "int argc", "type": ["definition"], "description": "int argc is number of arguments ", "keywords": [], "past": [50], "future": [], "id": 51, "related": []}, {"title": "char *argv[]", "type": ["definition"], "description": "char *argv[] is array of strings ", "keywords": [], "past": [50], "future": [53], "id": 52, "related": []}, {"title": "argv[0] is program name ", "type": ["definition"], "description": "argv[0] is program name ", "keywords": [], "past": [52], "future": [], "id": 53, "related": []}, {"title": "memory management is done by programmer ", "type": ["definition"], "description": "memory management is done by programmer ", "keywords": [], "past": [2, 12], "future": [55, 57, 63, 65, 73, 77], "id": 54, "related": []}, {"title": "address with & operator", "type": ["definition"], "description": "find address of any variable with & operator ", "keywords": [], "past": [18, 54], "future": [56, 79], "id": 55, "related": []}, {"title": "pointers", "type": ["definition"], "description": "pointers  ", "keywords": [], "past": [2, 12, 55, 58], "future": [59, 32, 60, 64], "id": 56, "related": []}, {"title": "dereference operator ", "type": ["definition"], "description": "dereference operator ", "keywords": [], "past": [54], "future": [58, 59], "id": 57, "related": []}, {"title": "append dereference operator to create pointer ", "type": ["definition"], "description": "append dereference operator to create pointer ", "keywords": [], "past": [57], "future": [56], "id": 58, "related": []}, {"title": "can prepend dereference operator to get the variable ", "type": ["definition"], "description": "can prepend dereference operator to get the variable ", "keywords": [], "past": [18, 57, 56], "future": [], "id": 59, "related": []}, {"title": "pointer arithmetic", "type": ["definition"], "description": "If you add an integer N to a pointer P, you get the address of N things later from pointer P ", "keywords": [], "past": [56], "future": [], "id": 60, "related": []}, {"title": "array lookups are pointer references ", "type": ["definition"], "description": "array lookups are pointer references ", "keywords": [], "past": [32], "future": [62], "id": 61, "related": []}, {"title": "&x[0] == x ", "type": ["definition"], "description": "&x[0] == x ", "keywords": [], "past": [61], "future": [], "id": 62, "related": []}, {"title": "memory is linear ", "type": ["definition"], "description": "memory is linear ", "keywords": [], "past": [54], "future": [], "id": 63, "related": []}, {"title": "pass by reference", "type": ["definition"], "description": "pass by reference ", "keywords": [], "past": [56, 12, 18], "future": [], "id": 64, "related": []}, {"title": "no garbage collection ", "type": ["definition"], "description": "no garbage collection ", "keywords": [], "past": [54, 8], "future": [], "id": 65, "related": []}, {"title": "string function library is #include <string.h> ", "type": ["definition"], "description": "string function library is #include <string.h> ", "keywords": [], "past": [47, 12, 35], "future": [67], "id": 66, "related": []}, {"title": "strcpy copies the string constant into var iable ", "type": ["definition"], "description": "strcpy copies the string constant into var iable ", "keywords": [], "past": [35, 66, 30, 68], "future": [], "id": 67, "related": []}, {"title": "array cannot be assigned to another ", "type": ["definition"], "description": "array cannot be assigned to another ", "keywords": [], "past": [32, 12], "future": [67], "id": 68, "related": []}, {"title": ">> operator", "type": ["definition"], "description": "value >> variable ", "keywords": [], "past": [23, 18], "future": [], "id": 69, "related": []}, {"title": "cin", "type": ["definition"], "description": "cin takes an input of numbers ", "keywords": [], "past": [20, 21], "future": [], "id": 70, "related": []}, {"title": "global variables are always permanent until program terminates", "type": ["definition"], "description": "global variables are always permanent until program terminates ", "keywords": [], "past": [29, 18, 77], "future": [76], "id": 71, "related": []}, {"title": "temporary variables", "type": ["definition"], "description": "temporary variables are allocated from a section of memory called the stack ", "keywords": [], "past": [18, 73], "future": [74], "id": 72, "related": []}, {"title": "stack ", "type": ["definition", "endd"], "description": "stack ", "keywords": [], "past": [54], "future": [72], "id": 73, "related": []}, {"title": "local variables ", "type": ["definition"], "description": "local variables ", "keywords": [], "past": [72], "future": [76], "id": 74, "related": []}, {"title": "static ", "type": ["definition"], "description": "static ", "keywords": [], "past": [18], "future": [76], "id": 75, "related": []}, {"title": "local variables and static are permanent", "type": ["definition"], "description": "local variables can be permanent if you declare static ", "keywords": [], "past": [71, 74, 75], "future": [], "id": 76, "related": []}, {"title": "permanent variables ", "type": ["definition"], "description": "permanent variables ", "keywords": [], "past": [18, 54], "future": [71], "id": 77, "related": []}, {"title": "c++ defaults to call by value, so values go in but they don't come out ", "type": ["definition"], "description": "c++ defaults to call by value, so values go in but they don't come out ", "keywords": [], "past": [31], "future": [], "id": 78, "related": []}, {"title": "&variable refers to same variable as value", "type": ["implication"], "description": "type &name = value means address of variable = value ", "keywords": [], "past": [55], "future": [], "id": 79, "related": []}]